

name: Java CI with Gradle-2-on-AKS

on:
  push:
    branches: [ "main" ]
permissions:
      id-token: write
      contents: read   
env:
 ACR_REGISTRY: devopspractice12.azurecr.io


jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: gradle
    - name: grant permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with gradle
      run: ./gradlew build
    
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    # Check the Quality Gate status.
    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       
    
       
    - name: Login to ACR Registry
      uses: docker/login-action@v2
      with: 
        registry: ${{ env.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }} 
        
    - name:  docker build and push 
      run: |
       docker build -t ${{ env.ACR_REGISTRY }}/javaapp:${{ github.run_number }} .
       docker push ${{ env.ACR_REGISTRY }}/javaapp:${{ github.run_number }}
       docker rmi ${{ env.ACR_REGISTRY }}/javaapp:${{ github.run_number }}
       
    - name: az cli login
      uses: azure/login@v1
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    - name: Az cli login 
      uses: azure/CLI@v1
      with:
          azcliversion: latest
          inlineScript: |
            az account show
            az group list
         
   
    - uses: azure/aks-set-context@v3
      with:
       resource-group: 'hd-insight-poc'
       cluster-name: 'CICD-java-gradle-app'
       
    - name: Set imagePullSecret
      uses: azure/k8s-create-secret@v4
      with: 
        namespace: 'my-java-app'
        secret-name: 'aks-acr-pull-image-secret'
        container-registry-url: ${{ env.ACR_REGISTRY }}
        container-registry-username: ${{ secrets.ACR_USERNAME }}
        container-registry-password: ${{ secrets.ACR_PASSWORD }}
      id: create-secret
   
    - uses: Azure/k8s-deploy@v4
      with:
       namespace: 'my-java-app'
       manifests: |
        deployment.yaml
        service.yaml
       images: ${{ env.ACR_REGISTRY }}/javaapp:${{ github.run_number }}
       imagepullsecrets: |
         aks-acr-pull-image-secret
      
       
    
